{
  "name": "commonsense",
  "version": "0.0.6",
  "main": "lib/commonsense.js",
  "ignore": [
    "**/.*",
    "node_modules",
    "components",
    "src",
    "package.json",
    ".travis.yml",
    "test"
  ],
  "gitHead": "6c769b8296f1c945c43b04594f9ae6601485d5d1",
  "readme": "[![Build Status](https://travis-ci.org/senseobservationsystems/commonsense-nodejs-module.png?branch=master)](https://travis-ci.org/https://travis-ci.org/senseobservationsystems/commonsense-nodejs-module)\n\n*This module is under heavy development.*\n\n# Commonsense API module\n\nRetrieve information from the [CommonSense](http://www.sense-os.nl/commonsense) platform, using asynchronous http(s) calls.\nThis module works for both Node.js as just in the browser. In the browser it depends upon the native `XMLHttpRequest` (or ancient `ActiveXObject` for `IE â‰¤ 6`) object. When used in Node.js, it uses the [node-XMLHttpRequest](https://github.com/driverdan/node-XMLHttpRequest) package.\n\nThis API is heavily inspired by [Commonsense-javascript-lib](https://github.com/senseobservationsystems/commonsense-javascript-lib), although this can be seen as an replacement by providing asynchronous call. The naming convention of [Commonsense-javascript-lib](https://github.com/senseobservationsystems/commonsense-javascript-lib) is changed to a more REST-style.\n\n## Install\n\n### NPM\nCommonsense-node is available in NPM:\n\n`npm install commonsense`\n\nTo include it in your node project, add `\"commonsense\"` to your `package.json`.\n\n### Bower\n\n`bower install commonsense`\n\n\n## Usage\n\nThis library can be used within a Node.js application and in the browser.\n\nWhen available in your project, the following is a typical beginning of a usecase.\n\n````coffeescript\n  sense = new Sense()\n  username = 'some_username'\n  password = 'md5_of_password'\n\n  sense.createSession username, password, (error, response) ->\n    sense.devices (error, response) ->\n      console.log 'Devices:', response.object\n````\n\nPlease look at the [examples](examples) for embedding in a [Node.js application](examples/simple.coffee) or a [browser script](examples/simple.html).\n\n## API calls\n\nThe following api calls on the Sense object are implemented.\nThe calls follow the REST-style with the verbs (create, update, delete) prefixed.\nAn index (list) action corresponds with the plural form and a single get with the single form.\nThe callback is of the form `next(err, response)`.\n\n```coffeescript\n  # A U T H E N T I C A T I O N #\n  createSession: (u, p, next)\n  deleteSession: (next)\n\n  # D A T A P R O C E S S O R S #\n  dataProcessors: (next)\n  dataProcessor: (id, next)\n  createDataProcessor: (data, next)\n  updateDataProcessor: (id, data, next)\n  deleteDataProcessor: (id, next)\n\n  # D A T A  P R O C E S S O R S  &  F I L E S #\n  dataProcessorsFiles: (next)\n  dataProcessorFile: (filename, next)\n  createDataProcessorsFile: (filename, data, next)\n  updateDataProcessorsFile: (filename, data, next)\n  deleteDataProcessorsFile: (filename, next)\n\n  # D E V I C E S #\n  devices: (next)\n  device: (id, next)\n  deviceSensors: (id, next)\n\n  # E N V I R O N M E N T S #\n  environments: (next)\n  environment: (id, next)\n  createEnvironment: (data, next)\n  updateEnvironment: (id, data, next)\n  deleteEnvironment: (id, next)\n\n  # E N V I R O N M E N T S  &  S E N S O R S #\n  environmentSensors: (id, next)\n  createEnvironmentSensor: (id, data, next)\n  deleteEnvironmentSensor: (id, sensor, next )\n\n  # G R O U P S #\n  allGroups: (next)\n  groups: (next)\n  group: (id, next)\n  createGroup: (data, next)\n  updateGroup: (id, data, next)\n  deleteGroup: (id, next)\n\n  # G R O U P S  &  U S E R S #\n  groupUsers: (id, next)\n  groupUser: (id, user, next)\n  createGroupUser: (id, data, next)\n  updateGroupUser: (id, user, data, next)\n  deleteGroupUser: (id, user, next)\n\n  # G R O U P S  &  S E N S O R S #\n  groupSensors: (id, next)\n  createGroupSensor: (id, data, next )\n  deleteGroupSensor: (id, sensor, next )\n\n  # S E N S O R S #\n  sensors: (next)\n  sensor: (id, next)\n  createSensor: (data, next)\n  updateSensor: (id, data, next)\n  deleteSensor: (id, next)\n  sensorsFind: (namespace, data, next)\n\n  # S E N S O R S  &  D A T A #\n  sensorData: (id, next)\n  createSensorData: (id, data, next)\n  createSensorsData: (data, next)\n  deleteSensorData: (id, data_id, next)\n\n  # S E N S O R S  &  E N V I R O N M E N T S #\n  sensorEnvironments: (id, next)\n\n  # S E N S O R S  &  D E V I C E S #\n  sensorDevice: (id, next)\n  createSensorDevice: (id, data, next)\n  deleteSensorDevice: (id, next)\n\n  # S E N S O R S  &  S E R V I C E S #\n  sensorsAvailableServices: (next)\n  sensorRunningServices: (id, next)\n  sensorAvailableServices: (id, next)\n  createSensorService: (id, data, next)\n  deleteSensorService: (id, service, next)\n  sensorServiceMethods: (id, service, next)\n  sensorServiceLearn: (id, service, data, next)\n  sensorServiceMethod: (id, service, method, next)\n  createSensorServiceMethod: (id, service, method, data, next)\n\n  # M E T A T A G S #\n  sensorsMetatags: (next)\n  sensorMetatags: (id, next)\n  createSensorMetatags: (id, data, next)\n  updateSensorMetatags: (id, data, next)\n  deleteSensorMetaTags: (id, next)\n\n  # U S E R S #\n  currentUsers: (next)\n  users: (next)\n  user: (id, next)\n  createUser: (next)\n  updateUser: (id, data, next)\n  deleteUser: (id, next)\n```\n\n## Changelog\n\nSee the [changelog](CHANGELOG.md) for details of changes.\n\n## Testing\n\nTo test the library, please modify `test/api_urls.coffee` by providing your username and md5 password. **Please rememeber to remove these before a commit**.\n\nRun `npm test` from the commandline to run the tests.\n\n## Contributing\n\n1. Fork this repository\n2. Clone it on your local machine\n3. Install developer dependencies:<br />\n`npm install`\n4. Create a topic branch:<br />\n`git checkout -d feature`\n5. **Make your changes**\n6. Verify that your changes do not break anything:<br />\n`npm test`\n7. Add tests if you introduced new functionality in `test/`\n8. Push your changes to your fork:<br />\n`git push -u [YOUR_FORK] feature`\n9. Open a pull request describing your changes:<br />\n`git pull-request`",
  "readmeFilename": "README.md",
  "_id": "commonsense@0.0.6",
  "description": "[![Build Status](https://travis-ci.org/senseobservationsystems/commonsense-nodejs-module.png?branch=master)](https://travis-ci.org/https://travis-ci.org/senseobservationsystems/commonsense-nodejs-module)",
  "repository": {
    "type": "git",
    "url": "git://github.com/senseobservationsystems/commonsense-nodejs-module.git"
  }
}